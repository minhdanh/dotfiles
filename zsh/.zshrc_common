# aliases

# pretty Git log
alias gl='git log --graph --pretty="%C(bold green)%h%Creset%C(auto)%d%Creset %s"'
alias glt='git log --graph --pretty="%C(bold green)%h%Creset %Cblue%ad%Creset%C(auto)%d%Creset %s" --date=short'
alias gltl='git log --graph --pretty="%C(bold green)%h%Creset %Cblue%ad%Creset%C(auto)%d%Creset %s"'

# pretty Git log, all references
alias gll='gl --all'

# pretty Git log, show authors
alias gla='git log --graph --pretty="%C(bold green)%h%Creset %C(yellow)%an%Creset %Cblue%ad%Creset%C(auto)%d%Creset %s" --date=short'

# pretty Git log, all references, show authors
alias glla='gla --all'

alias grst='git restore --staged'

alias gdft='DFT_BACKGROUND=light GIT_EXTERNAL_DIFF=difft git difftool'

alias glpe='DFT_BACKGROUND=light GIT_EXTERNAL_DIFF=difft git log -p --ext-diff'

alias gse='DFT_BACKGROUND=light GIT_EXTERNAL_DIFF=difft git show --ext-diff'

alias ls="eza -agh"
alias ll="eza -abglh"
alias h="history"
alias v="nvim"
alias vim="nvim"
alias cbc="ctrlcb-copy"
alias cbp="ctrlcb-paste"
alias kn="k neat"

source <(kubectl completion zsh)
alias kubectl=kubecolor
compdef kubecolor=kubectl

# alias less='less -m -g -i --underline-special --SILENT'
alias less='bat --style=plain --theme=Coldark-Dark'
# alias less='bat --style=plain'

alias joke='curl -s https://icanhazdadjoke.com'

## functions

# git clone a repo and cd to the directory of that repo
function gclone() {
  git clone "$1" && cd "$(basename "$1" .git)"
}

# look up a word from dict.org
function define() {
  curl -s dict://dict.org/d:$1:wn | sed '/^[0-9]\{3\} /d'
}

function def() {
  CONTENT="Hãy trả lời câu hỏi sau đây một cách đầy đủ: $@ có nghĩa là gì?"
  hmm_google $CONTENT
}

function hmm_openai() {
  setopt LOCAL_OPTIONS NO_NOTIFY NO_MONITOR
  CONTENT="$@"
  (curl -s --location --request POST 'https://api.openai.com/v1/chat/completions' \
  --header "Authorization: Bearer $OPENAI_API_KEY" \
  --header 'Content-Type: application/json' \
  --data-raw "{
  \"model\": \"gpt-3.5-turbo\",
  \"messages\": [{\"role\": \"user\", \"content\": \"${CONTENT}\"}]
  }" | jq -r '.choices[].message.content | gsub("[\\n]"; "")') &

  pid=$!

  spin='-\|/'

  i=0
  while kill -0 $pid 2>/dev/null
  do
    i=$(( (i+1) %4 ))
    printf "\r${spin:$i:1}"
    sleep .3
  done
}

function hmm_google() {
  setopt LOCAL_OPTIONS NO_NOTIFY NO_MONITOR
  MODEL="gemini-1.5-pro-latest" # or gemini-pro
  CONTENT="$@"
  (curl -s https://generativelanguage.googleapis.com/v1beta/models/$MODEL:generateContent\?key\=$GOOGLE_AI_API_KEY \
    -H 'Content-Type: application/json' \
    -X POST \
    -d "{\"contents\": [{ \"parts\":[{ \"text\": \"${CONTENT}\"}]}]}" 2> /dev/null | jq -r '.candidates[0].content.parts[0].text') &

  pid=$!

  spin='-\|/'

  i=0
  while kill -0 $pid 2>/dev/null
  do
    i=$(( (i+1) %4 ))
    printf "\r${spin:$i:1}"
    sleep .3
  done
}

function ggl() {
  if [[ "$#" != 0 ]] && [[ "$#" != 1 ]]
  then
    git pull --rebase origin "${*}"
  else
    [[ "$#" == 0 ]] && local b="$(git_current_branch)"
    git pull --rebase origin "${b:=$1}"
  fi
}

function nslu() {
  domain_name=$(echo "$1" | sed 's/https\?:\/\///' | awk -F/ '{print $1}')
  echo $domain_name
  nslookup $domain_name
}

function ec2find() {
  name=$1
  profile=$2
  aws ec2 describe-instances --profile $profile --region ap-southeast-1  --query 'Reservations[*].Instances[].[Tags[?Key==`Name`].Value[],PrivateIpAddress][][]' --filter 'Name=tag:Name,Values="*'$name'*"' | jq '.[]' | tr -d '"'
}
